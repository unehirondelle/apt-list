{"version":3,"sources":["assets/jumbotron-img.jpg","assets/apartment.jpg","components/jumbotron/jumbotron.jsx","components/aptCard/aptCard.jsx","components/apartmentsList/apartmentsList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","jumbotronPicture","backgroundImage","Background","backgroundPosition","Jumbotron","className","style","AptCard","key","this","props","id","data-testid","src","ApartmentPicture","alt","title","getLikeClasses","onClick","onLike","apartment","city","street","building","apartmentNumber","apartmentArea","areaUnit","agentLastName","agentFirstName","agentMiddleName","classes","liked","Component","ApartmentsList","apartments","map","attributes","address","house","room","area","unit","relationships","first_name","middle_name","last_name","App","state","handleLike","aptLiked","apartmentsList","index","indexOf","setState","axios","get","then","res","data","response","forEach","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23d07ec5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jumbotron-img.cfecc33f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/apartment.cb331afa.jpg\";","import React from \"react\";\r\nimport Background from \"../../assets/jumbotron-img.jpg\";\r\n\r\nlet jumbotronPicture = {\r\n    backgroundImage: `url(${Background})`,\r\n    backgroundPosition: \"top left\"\r\n}\r\n\r\nconst Jumbotron = () => {\r\n    return (\r\n        <header>\r\n            <div className=\"jumbotron jumbotron-fluid mt-5\" style={jumbotronPicture}>\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-4\">Квартиры в Тюмени</h1>\r\n                    <p className=\"lead\">Выберите квартиру мечты</p>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React, {Component} from \"react\";\r\nimport ApartmentPicture from \"../../assets/apartment.jpg\";\r\n\r\nclass AptCard extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div key={this.props.id}\r\n                 className=\"card col-sm-12 col-md-5 border-0 m-sm-1 m-md-4 p-0 justify-content-center align-middle\"\r\n                 data-testid=\"apartmentCard\"\r\n            >\r\n                <img className=\"card-img-top img-fluid\" src={ApartmentPicture} alt={`Apartment # ${this.props.id}`}/>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\" data-testid=\"adName\">\r\n                        {this.props.title} <i className={this.getLikeClasses()}\r\n                                              onClick={() => this.props.onLike(this.props.apartment)}> </i>\r\n                    </h5>\r\n                    <h6 className=\"card-subtitle mb-2 text-muted\">\r\n                        г. {this.props.city},\r\n                        <br/>\r\n                        ул. {this.props.street},\r\n                        д. {this.props.building},\r\n                        кв. {this.props.apartmentNumber}</h6>\r\n                    <p className=\"card-text\">\r\n                        <i className=\"bx bxl-codepen\"></i> {this.props.apartmentArea} {this.props.areaUnit}\r\n                        <br/>\r\n                        <i className=\"bx bx-user\"></i> {this.props.agentLastName} {this.props.agentFirstName} {this.props.agentMiddleName}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getLikeClasses() {\r\n        let classes = \"bx \";\r\n        classes += (this.props.liked === false) ? \"bx-heart\" : \"bxs-heart\";\r\n        return classes;\r\n    }\r\n}\r\n\r\nexport default AptCard;","import React, {Component} from \"react\";\r\nimport AptCard from \"../aptCard/aptCard\";\r\n\r\nclass ApartmentsList extends Component {\r\n    render() {\r\n        const {onLike, apartments} = this.props;\r\n        return (\r\n            <div className=\"row mx-auto d-inline-flex\" data-testid=\"apartmentsList\">\r\n                {apartments.map(apartment => (\r\n                    <AptCard key={apartment.id}\r\n                             onLike={onLike}\r\n                             liked={apartment.liked}\r\n                             apartment={apartment}\r\n                             id={apartment.id}\r\n                             title={apartment.attributes.title}\r\n                             city={apartment.attributes.address.city}\r\n                             street={apartment.attributes.address.street}\r\n                             building={apartment.attributes.address.house}\r\n                             apartmentNumber={apartment.attributes.address.room}\r\n                             apartmentArea={apartment.attributes.area}\r\n                             areaUnit={apartment.attributes.unit}\r\n                             agentFirstName={apartment.relationships.attributes.first_name}\r\n                             agentMiddleName={apartment.relationships.attributes.middle_name}\r\n                             agentLastName={apartment.relationships.attributes.last_name}\r\n                    />\r\n                ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ApartmentsList;","import React, {Component} from 'react';\r\nimport Jumbotron from \"./components/jumbotron/jumbotron\";\r\nimport ApartmentsList from \"./components/apartmentsList/apartmentsList\";\r\nimport axios from \"axios\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        apartments: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios.get(\"../entities.json\")\r\n            .then(res => {\r\n                const apartments = res.data.response;\r\n                apartments.forEach(apartment => {\r\n                    apartment.liked = false;\r\n                })\r\n                this.setState({apartments: apartments});\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Jumbotron/>\r\n                <main className=\"container mb-5\">\r\n                    <ApartmentsList\r\n                        apartments={this.state.apartments}\r\n                        onLike={this.handleLike}\r\n                    />\r\n                </main>\r\n                <footer className=\"fixed-bottom bg-light text-center font-weight-bold py-3\">Irina Plaksina &copy; 2020\r\n                </footer>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    handleLike = aptLiked => {\r\n        let apartmentsList = [...this.state.apartments];\r\n        const index = apartmentsList.indexOf(aptLiked);\r\n        apartmentsList[index] = {...aptLiked};\r\n        let likedValue = apartmentsList[index].liked;\r\n        if (likedValue === false) {\r\n            apartmentsList[index].liked = true;\r\n            this.setState({apartments: apartmentsList});\r\n        } else {\r\n            apartmentsList[index].liked = false;\r\n            this.setState({apartments: apartmentsList});\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'boxicons/css/boxicons.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}